{
	"info": {
		"_postman_id": "cb74ed8f-7470-4929-af21-9d67f4276e67",
		"name": "Rodaroda",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31900519"
	},
	"item": [
		{
			"name": "Success",
			"item": [
				{
					"name": "Localidades",
					"item": [
						{
							"name": "Consulta de Localidades",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.nome).to.have.lengthOf.below(4096);",
											"    });",
											"});",
											"",
											"pm.test(\"Teste: Tipo abaixo de 4096 caracteres\", function() {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.tipo).to.have.lengthOf.below(4096);",
											"    });",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo para cada objeto\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.nome).to.not.include(null);",
											"    });",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo descricao não nulo para cada objeto\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.tipo).to.not.include(null);",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/localidades",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"localidades"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consulta de Localidade por id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.nome).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Tipo abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.tipo).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo\", function () {",
											"    pm.expect(responseJson.nome).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo tipo não nulo\", function () {",
											"    pm.expect(responseJson.tipo).to.not.include(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/localidades/1",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"localidades",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Inserção de Localidade com tipo: origem",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.nome).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Tipo abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.tipo).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo\", function () {",
											"    pm.expect(responseJson.nome).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo tipo não nulo\", function () {",
											"    pm.expect(responseJson.tipo).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Tipo da localidade cadastrada\", function() {",
											"    pm.expect(responseJson.tipo).to.eql(\"origem\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Nome da Localidade {{RANDOM_NAME}}\",\n  \"tipo\": \"origem\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/localidades",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"localidades"
									]
								}
							},
							"response": []
						},
						{
							"name": "Inserção de Localidade com tipo: destino",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.nome).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Tipo abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.tipo).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo\", function () {",
											"    pm.expect(responseJson.nome).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo tipo não nulo\", function () {",
											"    pm.expect(responseJson.tipo).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Tipo da localidade cadastrada\", function() {",
											"    pm.expect(responseJson.tipo).to.eql(\"destino\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Nome da Localidade {{RANDOM_NAME}}\",\n  \"tipo\": \"destino\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/localidades",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"localidades"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualização de Localidade por id do tipo destino para origem",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const postProduct = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/localidades',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'nome': 'Nome da Localidade ' + pm.environment.get('RANDOM_NAME'),",
											"    'tipo': 'destino'",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postProduct, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('LOCALIDADE_ID', ID);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.nome).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Tipo abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.tipo).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo\", function () {",
											"    pm.expect(responseJson.nome).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo tipo não nulo\", function () {",
											"    pm.expect(responseJson.tipo).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Tipo da localidade cadastrada\", function() {",
											"    pm.expect(responseJson.tipo).to.eql(\"origem\");",
											"});",
											"",
											"pm.test(\"Teste: Nome da localidade atualizada\", function() {",
											"    pm.expect(responseJson.nome).to.eql(\"Localidade \" + pm.environment.get('RANDOM_NAME') + \" atualizada\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Localidade {{RANDOM_NAME}} atualizada\",\n  \"tipo\": \"origem\"\n}\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/localidades/{{LOCALIDADE_ID}}",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"localidades",
										"{{LOCALIDADE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualização de Localidade por id do tipo origem para destino",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const postProduct = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/localidades',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'nome': 'Nome da Localidade ' + pm.environment.get('RANDOM_NAME'),",
											"    'tipo': 'origem'",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postProduct, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('LOCALIDADE_ID', ID);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.nome).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Tipo abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.tipo).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo\", function () {",
											"    pm.expect(responseJson.nome).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo tipo não nulo\", function () {",
											"    pm.expect(responseJson.tipo).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Tipo da localidade cadastrada\", function() {",
											"    pm.expect(responseJson.tipo).to.eql(\"destino\");",
											"});",
											"",
											"pm.test(\"Teste: Nome da localidade atualizada\", function() {",
											"    pm.expect(responseJson.nome).to.eql(\"Localidade \" + pm.environment.get('RANDOM_NAME') + \" atualizada\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Localidade {{RANDOM_NAME}} atualizada\",\n  \"tipo\": \"destino\"\n}\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/localidades/{{LOCALIDADE_ID}}",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"localidades",
										"{{LOCALIDADE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Exclusão de Localidade por id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const postProduct = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/localidades',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'nome': 'Nome da Localidade ' + pm.environment.get('RANDOM_NAME'),",
											"    'tipo': 'destino'",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postProduct, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('LOCALIDADE_ID', ID);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Mensagem abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.message).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar message não nulo\", function () {",
											"    pm.expect(responseJson.message).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Mensagem de localidade excluída\", function() {",
											"    pm.expect(responseJson.message).to.eql(\"Localidade excluída com sucesso.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/localidades/{{LOCALIDADE_ID}}",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"localidades",
										"{{LOCALIDADE_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Produtos",
					"item": [
						{
							"name": "Consulta de Produtos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.nome).to.have.lengthOf.below(4096);",
											"    });",
											"});",
											"",
											"pm.test(\"Teste: Descrição abaixo de 4096 caracteres\", function() {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.descricao).to.have.lengthOf.below(4096);",
											"    });",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo para cada objeto\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.nome).to.not.include(null);",
											"    });",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo descricao não nulo para cada objeto\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.descricao).to.not.include(null);",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/produtos",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consulta de Produto por id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.nome).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Descrição abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.descricao).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo\", function () {",
											"    pm.expect(responseJson.nome).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo descricao não nulo\", function () {",
											"    pm.expect(responseJson.descricao).to.not.include(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/produtos/1",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"produtos",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Inserção de Produto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.nome).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Descrição abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.descricao).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo\", function () {",
											"    pm.expect(responseJson.nome).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo descricao não nulo\", function () {",
											"    pm.expect(responseJson.descricao).to.not.include(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Nome do Produto {{RANDOM_NAME}}\",\n  \"descricao\": \"Descrição do Produto {{RANDOM_NAME}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/produtos",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualização de Produto por id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const postProduct = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/produtos',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'nome': 'Produto ' + pm.environment.get('RANDOM_NAME'),",
											"    'descricao': 'Descrição do Produto ' + pm.environment.get('RANDOM_NAME')",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postProduct, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('PRODUCT_ID', ID);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.nome).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Descrição abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.descricao).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo\", function () {",
											"    pm.expect(responseJson.nome).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo descricao não nulo\", function () {",
											"    pm.expect(responseJson.descricao).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Nome do produto atualizado\", function() {",
											"    pm.expect(responseJson.nome).to.eql(\"Produto \" + pm.environment.get('RANDOM_NAME') + \" atualizado\");",
											"});",
											"",
											"pm.test(\"Teste: Descrição do produto atualizado\", function() {",
											"    pm.expect(responseJson.descricao).to.eql(\"Descrição Produto \" + pm.environment.get('RANDOM_NAME') + \" atualizado\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Produto {{RANDOM_NAME}} atualizado\",\n  \"descricao\": \"Descrição Produto {{RANDOM_NAME}} atualizado\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/produtos/{{PRODUCT_ID}}",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"produtos",
										"{{PRODUCT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Exclusão de Produto por id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const postProduct = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/produtos',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'nome': 'Produto ' + pm.environment.get('RANDOM_NAME'),",
											"    'descricao': 'Descrição do Produto ' + pm.environment.get('RANDOM_NAME')",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postProduct, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('PRODUCT_ID', ID);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Mensagem abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.message).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar message não nulo\", function () {",
											"    pm.expect(responseJson.message).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Mensagem de produto excluído\", function() {",
											"    pm.expect(responseJson.message).to.eql(\"Produto excluído com sucesso.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/produtos/{{PRODUCT_ID}}",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"produtos",
										"{{PRODUCT_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Transportadoras",
					"item": [
						{
							"name": "Consulta de Transportadoras",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.nome).to.have.lengthOf.below(4096);",
											"    });",
											"});",
											"",
											"pm.test(\"Teste: Contato abaixo de 4096 caracteres\", function() {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.contato).to.have.lengthOf.below(4096);",
											"    });",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo para cada objeto\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.nome).to.not.include(null);",
											"    });",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo contato não nulo para cada objeto\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.contato).to.not.include(null);",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/transportadoras",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"transportadoras"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consulta de Transportadora por id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.nome).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Contato abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.contato).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo\", function () {",
											"    pm.expect(responseJson.nome).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo contato não nulo\", function () {",
											"    pm.expect(responseJson.contato).to.not.include(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/transportadoras/1",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"transportadoras",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Inserção de Transportadora",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.nome).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Contato abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.contato).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo\", function () {",
											"    pm.expect(responseJson.nome).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo tipo não nulo\", function () {",
											"    pm.expect(responseJson.contato).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Contato da transportadora cadastrada\", function() {",
											"    pm.expect(responseJson.contato).to.eql(pm.environment.get('RANDOM_NAME') + '@' + pm.environment.get('RANDOM_NAME') + '.com');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Nome da Transportadora {{RANDOM_NAME}}\",\n  \"contato\": \"{{RANDOM_NAME}}@{{RANDOM_NAME}}.com\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/transportadoras",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"transportadoras"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualização de Transportadora por id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const postProduct = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/transportadoras',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'nome': 'Nome da Transportadora ' + pm.environment.get('RANDOM_NAME'),",
											"    'contato': pm.environment.get('RANDOM_NAME') + '@' + pm.environment.get('RANDOM_NAME') + '.com'",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postProduct, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('TRANSPORTADORA_ID', ID);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.nome).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Contato abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.contato).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo\", function () {",
											"    pm.expect(responseJson.nome).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo contato não nulo\", function () {",
											"    pm.expect(responseJson.contato).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Contato da transportadora cadastrada\", function() {",
											"    pm.expect(responseJson.contato).to.eql(pm.environment.get('RANDOM_NAME') + '@' + pm.environment.get('RANDOM_NAME') + '.com.br');",
											"});",
											"",
											"pm.test(\"Teste: Nome da transportadora atualizada\", function() {",
											"    pm.expect(responseJson.nome).to.eql(\"Transportadora \" + pm.environment.get('RANDOM_NAME') + \" atualizada\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Transportadora {{RANDOM_NAME}} atualizada\",\n  \"contato\": \"{{RANDOM_NAME}}@{{RANDOM_NAME}}.com.br\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/transportadoras/{{TRANSPORTADORA_ID}}",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"transportadoras",
										"{{TRANSPORTADORA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Exclusão de Transportadora por id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const postProduct = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/transportadoras',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'nome': 'Nome da Transportadora ' + pm.environment.get('RANDOM_NAME'),",
											"    'contato': pm.environment.get('RANDOM_NAME') + '@' + pm.environment.get('RANDOM_NAME') + '.com'",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postProduct, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('TRANSPORTADORA_ID', ID);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Mensagem abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.message).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar message não nulo\", function () {",
											"    pm.expect(responseJson.message).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Mensagem de transportadora excluída\", function() {",
											"    pm.expect(responseJson.message).to.eql(\"Transportadora excluída com sucesso.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/transportadoras/{{TRANSPORTADORA_ID}}",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"transportadoras",
										"{{TRANSPORTADORA_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Veiculos",
					"item": [
						{
							"name": "Consulta de Veiculos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.nome).to.have.lengthOf.below(4096);",
											"    });",
											"});",
											"",
											"pm.test(\"Teste: Modelo abaixo de 4096 caracteres\", function() {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.modelo).to.have.lengthOf.below(4096);",
											"    });",
											"});",
											"",
											"pm.test(\"Teste: Placa abaixo de 4096 caracteres\", function() {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.placa).to.have.lengthOf.below(4096);",
											"    });",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo para cada objeto\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.nome).to.not.include(null);",
											"    });",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo modelo não nulo para cada objeto\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.modelo).to.not.include(null);",
											"    });",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo placa não nulo para cada objeto\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.placa).to.not.include(null);",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/veiculos",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"veiculos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consulta de Veiculo por id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.nome).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Modelo abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.modelo).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Placa abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.placa).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo\", function () {",
											"    pm.expect(responseJson.nome).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo modelo não nulo\", function () {",
											"    pm.expect(responseJson.modelo).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo placa não nulo\", function () {",
											"    pm.expect(responseJson.placa).to.not.include(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/veiculos/1",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"veiculos",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Viagens",
					"item": []
				}
			]
		},
		{
			"name": "Failure",
			"item": [
				{
					"name": "Localidades",
					"item": []
				},
				{
					"name": "Produtos",
					"item": [
						{
							"name": "Consulta de Produto por id inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 404\", function() {",
											"    pm.expect(pm.response.code).to.equal(404);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a Not Found\", function() {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.notFound;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Descrição abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.error).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.not.eql(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo\", function () {",
											"    pm.expect(responseJson.nome).to.be.not.eql(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo descricao não nulo\", function () {",
											"    pm.expect(responseJson.descricao).to.be.not.eql(null);",
											"});",
											"",
											"pm.test(\"Teste: Descrição de mensagem de produto não encontrado\", function() {",
											"    pm.expect(responseJson.error).to.eql(\"Produto não encontrado.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/produtos/0",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"produtos",
										"0"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Transportadoras",
					"item": []
				},
				{
					"name": "Veiculos",
					"item": []
				},
				{
					"name": "Viagens",
					"item": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"function generateANameGenerator() {",
					"  const num = 10;",
					"  const randomNameGenerator = (num) => {",
					"    let res = '';",
					"    for (let i = 0; i < num; i++) {",
					"      const random = Math.floor(Math.random() * 27);",
					"      res += String.fromCharCode(97 + random);",
					"    }",
					"    return res;",
					"  };",
					"  return randomNameGenerator(num);",
					"}",
					"",
					"const randomName = generateANameGenerator();",
					"pm.environment.set(\"RANDOM_NAME\", randomName);",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "APP_DOMAIN_AND_PORT",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}