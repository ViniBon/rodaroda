{
	"info": {
		"_postman_id": "b2e0c7a7-d60f-4229-85a1-a22757892be7",
		"name": "Rodaroda",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14986445"
	},
	"item": [
		{
			"name": "Success",
			"item": [
				{
					"name": "Localidades",
					"item": []
				},
				{
					"name": "Produtos",
					"item": [
						{
							"name": "Consulta de Produtos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Descrição abaixao de 4096 caracteres\", function() {",
											"    pm.expect(responseJson[0].descricao).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.not.eql(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo para cada objeto\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.nome).to.not.be.null;",
											"    });",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo descricao não nulo para cada objeto\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.descricao).to.not.be.null;",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/produtos",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consulta de Produto por id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Descrição abaixao de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.descricao).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.not.eql(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo\", function () {",
											"    pm.expect(responseJson.nome).to.be.not.eql(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo descricao não nulo\", function () {",
											"    pm.expect(responseJson.descricao).to.be.not.eql(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/produtos/1",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"produtos",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Inserção de Produto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Descrição abaixao de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.descricao).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.not.eql(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo\", function () {",
											"    pm.expect(responseJson.nome).to.be.not.eql(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo descricao não nulo\", function () {",
											"    pm.expect(responseJson.descricao).to.be.not.eql(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Produto {{RANDOM_NAME}}\",\n  \"descricao\": \"Descrição do Produto {{RANDOM_NAME}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/produtos",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualização de Produto por id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const postProduct = {",
											"  url: 'http://localhost:3000' + '/produtos',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'nome': 'Produto ' + pm.environment.get('RANDOM_NAME'),",
											"    'descricao': 'Descrição do Produto ' + pm.environment.get('RANDOM_NAME')",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postProduct, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('PRODUCT_ID', ID);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Descrição abaixao de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.descricao).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.not.eql(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo\", function () {",
											"    pm.expect(responseJson.nome).to.be.not.eql(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo descricao não nulo\", function () {",
											"    pm.expect(responseJson.descricao).to.be.not.eql(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Produto {{RANDOM_NAME}} atualizado\",\n  \"descricao\": \"Descricao Produto {{RANDOM_NAME}} atualizado\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/produtos/{{PRODUCT_ID}}",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"produtos",
										"{{PRODUCT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Exclusão de Produto por id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const postProduct = {",
											"  url: 'http://localhost:3000' + '/produtos',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'nome': 'Produto ' + pm.environment.get('RANDOM_NAME'),",
											"    'descricao': 'Descrição do Produto ' + pm.environment.get('RANDOM_NAME')",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postProduct, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('PRODUCT_ID', ID);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Descrição abaixao de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.message).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.not.eql(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar message não nulo\", function () {",
											"    pm.expect(responseJson.message).to.be.not.eql(null);",
											"});",
											"",
											"pm.test(\"Teste: Descrição de mensagem de produto excluído\", function() {",
											"    pm.expect(responseJson.message).to.eql(\"Produto excluído com sucesso.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/produtos/{{PRODUCT_ID}}",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"produtos",
										"{{PRODUCT_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Transportadoras",
					"item": []
				},
				{
					"name": "Veiculos",
					"item": []
				},
				{
					"name": "Viagens",
					"item": []
				}
			]
		},
		{
			"name": "Failure",
			"item": [
				{
					"name": "Localidades",
					"item": []
				},
				{
					"name": "Produtos",
					"item": []
				},
				{
					"name": "Transportadoras",
					"item": []
				},
				{
					"name": "Veiculos",
					"item": []
				},
				{
					"name": "Viagens",
					"item": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"function generateANameGenerator() {",
					"  const num = 10;",
					"  const randomNameGenerator = (num) => {",
					"    let res = '';",
					"    for (let i = 0; i < num; i++) {",
					"      const random = Math.floor(Math.random() * 27);",
					"      res += String.fromCharCode(97 + random);",
					"    }",
					"    return res;",
					"  };",
					"  return randomNameGenerator(num);",
					"}",
					"",
					"const randomName = generateANameGenerator();",
					"pm.environment.set(\"RANDOM_NAME\", randomName);",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "APP_DOMAIN_AND_PORT",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}