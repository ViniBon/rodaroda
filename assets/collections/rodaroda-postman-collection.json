{
	"info": {
		"_postman_id": "6b0d3532-2e35-4e86-b74d-8f3e3927b0ab",
		"name": "Rodaroda BACKUP",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31900519"
	},
	"item": [
		{
			"name": "Success",
			"item": [
				{
					"name": "Localidades",
					"item": [
						{
							"name": "Consulta de Localidades",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.nome).to.have.lengthOf.below(4096);",
											"    });",
											"});",
											"",
											"pm.test(\"Teste: Tipo abaixo de 4096 caracteres\", function() {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.tipo).to.have.lengthOf.below(4096);",
											"    });",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo para cada objeto\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.nome).to.not.include(null);",
											"    });",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo descricao não nulo para cada objeto\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.tipo).to.not.include(null);",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/localidades",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"localidades"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consulta de Localidade por id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.nome).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Tipo abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.tipo).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo\", function () {",
											"    pm.expect(responseJson.nome).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo tipo não nulo\", function () {",
											"    pm.expect(responseJson.tipo).to.not.include(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/localidades/1",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"localidades",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Inserção de Localidade com tipo: origem",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.nome).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Tipo abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.tipo).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo\", function () {",
											"    pm.expect(responseJson.nome).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo tipo não nulo\", function () {",
											"    pm.expect(responseJson.tipo).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Tipo da localidade cadastrada\", function() {",
											"    pm.expect(responseJson.tipo).to.eql(\"origem\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Nome da Localidade {{RANDOM_NAME}}\",\n  \"tipo\": \"origem\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/localidades",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"localidades"
									]
								}
							},
							"response": []
						},
						{
							"name": "Inserção de Localidade com tipo: destino",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.nome).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Tipo abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.tipo).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo\", function () {",
											"    pm.expect(responseJson.nome).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo tipo não nulo\", function () {",
											"    pm.expect(responseJson.tipo).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Tipo da localidade cadastrada\", function() {",
											"    pm.expect(responseJson.tipo).to.eql(\"destino\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Nome da Localidade {{RANDOM_NAME}}\",\n  \"tipo\": \"destino\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/localidades",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"localidades"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualização de Localidade por id do tipo destino para origem",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const postProduct = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/localidades',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'nome': 'Nome da Localidade ' + pm.environment.get('RANDOM_NAME'),",
											"    'tipo': 'destino'",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postProduct, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('LOCALIDADE_ID', ID);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.nome).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Tipo abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.tipo).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo\", function () {",
											"    pm.expect(responseJson.nome).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo tipo não nulo\", function () {",
											"    pm.expect(responseJson.tipo).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Tipo da localidade cadastrada\", function() {",
											"    pm.expect(responseJson.tipo).to.eql(\"origem\");",
											"});",
											"",
											"pm.test(\"Teste: Nome da localidade atualizada\", function() {",
											"    pm.expect(responseJson.nome).to.eql(\"Localidade \" + pm.environment.get('RANDOM_NAME') + \" atualizada\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Localidade {{RANDOM_NAME}} atualizada\",\n  \"tipo\": \"origem\"\n}\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/localidades/{{LOCALIDADE_ID}}",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"localidades",
										"{{LOCALIDADE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualização de Localidade por id do tipo origem para destino",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const postProduct = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/localidades',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'nome': 'Nome da Localidade ' + pm.environment.get('RANDOM_NAME'),",
											"    'tipo': 'origem'",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postProduct, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('LOCALIDADE_ID', ID);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.nome).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Tipo abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.tipo).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo\", function () {",
											"    pm.expect(responseJson.nome).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo tipo não nulo\", function () {",
											"    pm.expect(responseJson.tipo).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Tipo da localidade cadastrada\", function() {",
											"    pm.expect(responseJson.tipo).to.eql(\"destino\");",
											"});",
											"",
											"pm.test(\"Teste: Nome da localidade atualizada\", function() {",
											"    pm.expect(responseJson.nome).to.eql(\"Localidade \" + pm.environment.get('RANDOM_NAME') + \" atualizada\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Localidade {{RANDOM_NAME}} atualizada\",\n  \"tipo\": \"destino\"\n}\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/localidades/{{LOCALIDADE_ID}}",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"localidades",
										"{{LOCALIDADE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Exclusão de Localidade por id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const postProduct = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/localidades',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'nome': 'Nome da Localidade ' + pm.environment.get('RANDOM_NAME'),",
											"    'tipo': 'destino'",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postProduct, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('LOCALIDADE_ID', ID);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Mensagem abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.message).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar message não nulo\", function () {",
											"    pm.expect(responseJson.message).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Mensagem de localidade excluída\", function() {",
											"    pm.expect(responseJson.message).to.eql(\"Localidade excluída com sucesso.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/localidades/{{LOCALIDADE_ID}}",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"localidades",
										"{{LOCALIDADE_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Produtos",
					"item": [
						{
							"name": "Consulta de Produtos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.nome).to.have.lengthOf.below(4096);",
											"    });",
											"});",
											"",
											"pm.test(\"Teste: Descrição abaixo de 4096 caracteres\", function() {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.descricao).to.have.lengthOf.below(4096);",
											"    });",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo para cada objeto\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.nome).to.not.include(null);",
											"    });",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo descricao não nulo para cada objeto\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.descricao).to.not.include(null);",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/produtos",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consulta de Produto por id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.nome).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Descrição abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.descricao).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo\", function () {",
											"    pm.expect(responseJson.nome).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo descricao não nulo\", function () {",
											"    pm.expect(responseJson.descricao).to.not.include(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/produtos/1",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"produtos",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Inserção de Produto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.nome).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Descrição abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.descricao).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo\", function () {",
											"    pm.expect(responseJson.nome).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo descricao não nulo\", function () {",
											"    pm.expect(responseJson.descricao).to.not.include(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Nome do Produto {{RANDOM_NAME}}\",\n  \"descricao\": \"Descrição do Produto {{RANDOM_NAME}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/produtos",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualização de Produto por id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const postProduct = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/produtos',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'nome': 'Produto ' + pm.environment.get('RANDOM_NAME'),",
											"    'descricao': 'Descrição do Produto ' + pm.environment.get('RANDOM_NAME')",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postProduct, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('PRODUCT_ID', ID);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.nome).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Descrição abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.descricao).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo\", function () {",
											"    pm.expect(responseJson.nome).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo descricao não nulo\", function () {",
											"    pm.expect(responseJson.descricao).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Nome do produto atualizado\", function() {",
											"    pm.expect(responseJson.nome).to.eql(\"Produto \" + pm.environment.get('RANDOM_NAME') + \" atualizado\");",
											"});",
											"",
											"pm.test(\"Teste: Descrição do produto atualizado\", function() {",
											"    pm.expect(responseJson.descricao).to.eql(\"Descrição Produto \" + pm.environment.get('RANDOM_NAME') + \" atualizado\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Produto {{RANDOM_NAME}} atualizado\",\n  \"descricao\": \"Descrição Produto {{RANDOM_NAME}} atualizado\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/produtos/{{PRODUCT_ID}}",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"produtos",
										"{{PRODUCT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Exclusão de Produto por id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const postProduct = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/produtos',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'nome': 'Produto ' + pm.environment.get('RANDOM_NAME'),",
											"    'descricao': 'Descrição do Produto ' + pm.environment.get('RANDOM_NAME')",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postProduct, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('PRODUCT_ID', ID);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Mensagem abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.message).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar message não nulo\", function () {",
											"    pm.expect(responseJson.message).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Mensagem de produto excluído\", function() {",
											"    pm.expect(responseJson.message).to.eql(\"Produto excluído com sucesso.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/produtos/{{PRODUCT_ID}}",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"produtos",
										"{{PRODUCT_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Transportadoras",
					"item": [
						{
							"name": "Consulta de Transportadoras",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.nome).to.have.lengthOf.below(4096);",
											"    });",
											"});",
											"",
											"pm.test(\"Teste: Contato abaixo de 4096 caracteres\", function() {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.contato).to.have.lengthOf.below(4096);",
											"    });",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo para cada objeto\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.nome).to.not.include(null);",
											"    });",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo contato não nulo para cada objeto\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.contato).to.not.include(null);",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/transportadoras",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"transportadoras"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consulta de Transportadora por id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.nome).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Contato abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.contato).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo\", function () {",
											"    pm.expect(responseJson.nome).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo contato não nulo\", function () {",
											"    pm.expect(responseJson.contato).to.not.include(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/transportadoras/1",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"transportadoras",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Inserção de Transportadora",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.nome).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Contato abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.contato).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo\", function () {",
											"    pm.expect(responseJson.nome).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo contato não nulo\", function () {",
											"    pm.expect(responseJson.contato).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Contato da transportadora cadastrada\", function() {",
											"    pm.expect(responseJson.contato).to.eql(pm.environment.get('RANDOM_NAME') + '@' + pm.environment.get('RANDOM_NAME') + '.com');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Nome da Transportadora {{RANDOM_NAME}}\",\n  \"contato\": \"{{RANDOM_NAME}}@{{RANDOM_NAME}}.com\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/transportadoras",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"transportadoras"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualização de Transportadora por id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const postProduct = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/transportadoras',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'nome': 'Nome da Transportadora ' + pm.environment.get('RANDOM_NAME'),",
											"    'contato': pm.environment.get('RANDOM_NAME') + '@' + pm.environment.get('RANDOM_NAME') + '.com'",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postProduct, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('TRANSPORTADORA_ID', ID);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.nome).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Contato abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.contato).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo\", function () {",
											"    pm.expect(responseJson.nome).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo contato não nulo\", function () {",
											"    pm.expect(responseJson.contato).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Contato da transportadora cadastrada\", function() {",
											"    pm.expect(responseJson.contato).to.eql(pm.environment.get('RANDOM_NAME') + '@' + pm.environment.get('RANDOM_NAME') + '.com.br');",
											"});",
											"",
											"pm.test(\"Teste: Nome da transportadora atualizada\", function() {",
											"    pm.expect(responseJson.nome).to.eql(\"Transportadora \" + pm.environment.get('RANDOM_NAME') + \" atualizada\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Transportadora {{RANDOM_NAME}} atualizada\",\n  \"contato\": \"{{RANDOM_NAME}}@{{RANDOM_NAME}}.com.br\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/transportadoras/{{TRANSPORTADORA_ID}}",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"transportadoras",
										"{{TRANSPORTADORA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Exclusão de Transportadora por id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const postProduct = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/transportadoras',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'nome': 'Nome da Transportadora ' + pm.environment.get('RANDOM_NAME'),",
											"    'contato': pm.environment.get('RANDOM_NAME') + '@' + pm.environment.get('RANDOM_NAME') + '.com'",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postProduct, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('TRANSPORTADORA_ID', ID);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Mensagem abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.message).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar message não nulo\", function () {",
											"    pm.expect(responseJson.message).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Mensagem de transportadora excluída\", function() {",
											"    pm.expect(responseJson.message).to.eql(\"Transportadora excluída com sucesso.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/transportadoras/{{TRANSPORTADORA_ID}}",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"transportadoras",
										"{{TRANSPORTADORA_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Veiculos",
					"item": [
						{
							"name": "Consulta de Veiculos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.nome).to.have.lengthOf.below(4096);",
											"    });",
											"});",
											"",
											"pm.test(\"Teste: Modelo abaixo de 4096 caracteres\", function() {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.modelo).to.have.lengthOf.below(4096);",
											"    });",
											"});",
											"",
											"pm.test(\"Teste: Placa abaixo de 4096 caracteres\", function() {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.placa).to.have.lengthOf.below(4096);",
											"    });",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo para cada objeto\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.nome).to.not.include(null);",
											"    });",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo modelo não nulo para cada objeto\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.modelo).to.not.include(null);",
											"    });",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo placa não nulo para cada objeto\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.placa).to.not.include(null);",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/veiculos",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"veiculos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consulta de Veiculo por id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.nome).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Modelo abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.modelo).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Placa abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.placa).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo\", function () {",
											"    pm.expect(responseJson.nome).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo modelo não nulo\", function () {",
											"    pm.expect(responseJson.modelo).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo placa não nulo\", function () {",
											"    pm.expect(responseJson.placa).to.not.include(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Cache-Control",
										"value": "no-cache",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/veiculos/1",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"veiculos",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Inserção de Veiculo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo deve ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.nome).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Modelo abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.modelo).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Placa abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.placa).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo\", function () {",
											"    pm.expect(responseJson.nome).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo modelo não nulo\", function () {",
											"    pm.expect(responseJson.modelo).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo placa não nulo\", function () {",
											"    pm.expect(responseJson.placa).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Nome do veículo cadastrado\", function() {",
											"    pm.expect(responseJson.nome).to.eql(\"Nome do Veículo \" + pm.environment.get(\"RANDOM_NAME\"));",
											"});",
											"",
											"pm.test(\"Teste: Modelo do veículo cadastrado\", function() {",
											"    pm.expect(responseJson.modelo).to.eql(\"Modelo do Veículo \" + pm.environment.get(\"RANDOM_NAME\"));",
											"});",
											"",
											"pm.test(\"Teste: Placa do veículo cadastrado\", function() {",
											"    pm.expect(responseJson.placa).to.eql(pm.environment.get(\"RANDOM_VEHICLEID\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Nome do Veículo {{RANDOM_NAME}}\",\n  \"modelo\": \"Modelo do Veículo {{RANDOM_NAME}}\",\n  \"placa\": \"{{RANDOM_VEHICLEID}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/veiculos",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"veiculos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualização de Veiculo por id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const postProduct = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/veiculos',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'nome': 'Nome do Veiculo ' + pm.environment.get('RANDOM_NAME'),",
											"    'modelo': 'Modelo do Veículo' + pm.environment.get('RANDOM_NAME'),",
											"    'placa': pm.environment.get('RANDOM_VEHICLEID')",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postProduct, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('VEICULOS_ID', ID);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Nome abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.nome).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Modelo abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.modelo).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Placa abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.placa).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo\", function () {",
											"    pm.expect(responseJson.nome).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo modelo não nulo\", function () {",
											"    pm.expect(responseJson.modelo).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo placa não nulo\", function () {",
											"    pm.expect(responseJson.placa).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Nome do veículo cadastrado\", function() {",
											"    pm.expect(responseJson.nome).to.eql(\"Veiculo \" + pm.environment.get(\"RANDOM_NAME\") + \" atualizado\");",
											"});",
											"",
											"pm.test(\"Teste: Modelo do veículo cadastrado\", function() {",
											"    pm.expect(responseJson.modelo).to.eql(\"Modelo \" + pm.environment.get(\"RANDOM_NAME\") + \" atualizado\");",
											"});",
											"",
											"pm.test(\"Teste: Placa do veículo cadastrado\", function() {",
											"    pm.expect(responseJson.placa).to.eql(pm.environment.get(\"RANDOM_VEHICLEID\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Veiculo {{RANDOM_NAME}} atualizado\",\n  \"modelo\": \"Modelo {{RANDOM_NAME}} atualizado\",\n  \"placa\": \"{{RANDOM_VEHICLEID}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/veiculos/{{VEICULOS_ID}}",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"veiculos",
										"{{VEICULOS_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Exclusão de Veiculo por id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const postProduct = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/veiculos',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'nome': 'Nome do Veiculo ' + pm.environment.get('RANDOM_NAME'),",
											"    'modelo': 'Modelo do Veículo' + pm.environment.get('RANDOM_NAME'),",
											"    'placa': pm.environment.get('RANDOM_VEHICLEID')",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postProduct, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('VEICULOS_ID', ID);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Mensagem abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.message).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar message não nulo\", function () {",
											"    pm.expect(responseJson.message).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Mensagem de transportadora excluída\", function() {",
											"    pm.expect(responseJson.message).to.eql(\"Veículo excluído com sucesso.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/veiculos/{{VEICULOS_ID}}",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"veiculos",
										"{{VEICULOS_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function generateVehicleIdentification(){",
									"  const ALPHABET = [",
									"    'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',",
									"  ];",
									"  let letter = [];",
									"  for (let i = 0; i < 4; i++) {",
									"    const number = (Math.random() * 100).toFixed(0);",
									"    const numberResult = parseFloat(number);",
									"    numberResult <= 25 ? letter.push(ALPHABET[numberResult]) : i--;",
									"  }",
									"  let number = [];",
									"  for (let i = 0; i < 3; i++) {",
									"    number.push(Math.floor(Math.random() * 9));",
									"  }",
									"  return `${letter[0]}${letter[1]}${letter[2]}${number[0]}${letter[3]}${number[1]}${number[2]}`;",
									"}",
									"",
									"const randomVehicleId = generateVehicleIdentification();",
									"pm.environment.set(\"RANDOM_VEHICLEID\", randomVehicleId);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Viagens",
					"item": [
						{
							"name": "Consulta de Viagem por id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//TODO EXPAND THE TESTS",
											"",
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Data chegada abaixo de 4096 caracteres\", function() {",
											"        pm.expect(responseJson.data_chegada).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Data partida abaixo de 4096 caracteres\", function() {",
											"        pm.expect(responseJson.data_partida).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo data partida não nulo para cada objeto\", function () {",
											"        pm.expect(responseJson.data_partida).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo data chegada não nulo para cada objeto\", function () {",
											"        pm.expect(responseJson.data_chegada).to.not.include(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Cache-Control",
										"value": "no-cache",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/viagens/1",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"viagens",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consulta de Viagens",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//TODO EXPAND THE TESTS",
											"",
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Data chegada abaixo de 4096 caracteres\", function() {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.data_chegada).to.have.lengthOf.below(4096);",
											"    });",
											"});",
											"",
											"pm.test(\"Teste: Data partida abaixo de 4096 caracteres\", function() {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.data_partida).to.have.lengthOf.below(4096);",
											"    });",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo data partida não nulo para cada objeto\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.data_partida).to.not.include(null);",
											"    });",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo data chegada não nulo para cada objeto\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.data_chegada).to.not.include(null);",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/viagens",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"viagens"
									]
								}
							},
							"response": []
						},
						{
							"name": "Inserção de Viagem",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//TODO EXPAND THE TESTS",
											"",
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo deve ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Data chegada abaixo de 4096 caracteres\", function() {",
											"        pm.expect(responseJson.data_chegada).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Data partida abaixo de 4096 caracteres\", function() {",
											"        pm.expect(responseJson.data_partida).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo data partida não nulo\", function () {",
											"    pm.expect(responseJson.data_partida).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo data chegada não nulo\", function () {",
											"    pm.expect(responseJson.data_chegada).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Data partida cadastrada\", function() {",
											"    pm.expect(responseJson.data_partida).to.eql(\"2024-08-20T11:00:00.000Z\");",
											"});",
											"",
											"pm.test(\"Teste: Data chegada cadastrada\", function() {",
											"    pm.expect(responseJson.data_chegada).to.eql(\"2024-08-25T11:00:00.000Z\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateVehicleIdentification(){",
											"  const ALPHABET = [",
											"    'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',",
											"  ];",
											"  let letter = [];",
											"  for (let i = 0; i < 4; i++) {",
											"    const number = (Math.random() * 100).toFixed(0);",
											"    const numberResult = parseFloat(number);",
											"    numberResult <= 25 ? letter.push(ALPHABET[numberResult]) : i--;",
											"  }",
											"  let number = [];",
											"  for (let i = 0; i < 3; i++) {",
											"    number.push(Math.floor(Math.random() * 9));",
											"  }",
											"  return `${letter[0]}${letter[1]}${letter[2]}${number[0]}${letter[3]}${number[1]}${number[2]}`;",
											"}",
											"",
											"const randomVehicleId = generateVehicleIdentification();",
											"pm.environment.set(\"RANDOM_VEHICLEID\", randomVehicleId);",
											"",
											"const postVehicle = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/veiculos',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'nome': 'Nome do Veiculo ' + pm.environment.get('RANDOM_NAME'),",
											"    'modelo': 'Modelo do Veículo' + pm.environment.get('RANDOM_NAME'),",
											"    'placa': pm.environment.get('RANDOM_VEHICLEID')",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postVehicle, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('VEICULO_ID', ID);",
											"});",
											"",
											"// ----",
											"",
											"const postCarrier = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/transportadoras',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'nome': 'Nome da Transportadora ' + pm.environment.get('RANDOM_NAME'),",
											"    'contato': pm.environment.get('RANDOM_NAME') + '@' + pm.environment.get('RANDOM_NAME') + '.com'",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postCarrier, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('TRANSPORTADORA_ID', ID);",
											"});",
											"",
											"// ----",
											"",
											"const postProduct = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/produtos',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'nome': 'Produto ' + pm.environment.get('RANDOM_NAME'),",
											"    'descricao': 'Descrição do Produto ' + pm.environment.get('RANDOM_NAME')",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postProduct, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('PRODUCT_ID', ID);",
											"});",
											"",
											"// ----",
											"",
											"const postLocalityDestination = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/localidades',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'nome': 'Nome da Localidade ' + pm.environment.get('RANDOM_NAME'),",
											"    'tipo': 'destino'",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postLocalityDestination, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('LOCALIDADEDESTINO_ID', ID);",
											"});",
											"",
											"// ----",
											"",
											"const postLocalityOrigin = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/localidades',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'nome': 'Nome da Localidade ' + pm.environment.get('RANDOM_NAME'),",
											"    'tipo': 'origem'",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postLocalityOrigin, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('LOCALIDADEORIGEM_ID', ID);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"origem_id\": \"{{LOCALIDADEORIGEM_ID}}\",\n  \"destino_id\": \"{{LOCALIDADEDESTINO_ID}}\",\n  \"produto_id\": \"{{PRODUCT_ID}}\",\n  \"transportadora_id\": \"{{TRANSPORTADORA_ID}}\",\n  \"veiculo_id\": \"{{VEICULO_ID}}\",\n  \"data_partida\": \"2024-08-20 08:00:00.00Z\",\n  \"data_chegada\": \"2024-08-25 08:00:00.00Z\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/viagens",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"viagens"
									]
								}
							},
							"response": []
						},
						{
							"name": "Exclusão de Viagem por id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateVehicleIdentification(){",
											"  const ALPHABET = [",
											"    'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',",
											"  ];",
											"  let letter = [];",
											"  for (let i = 0; i < 4; i++) {",
											"    const number = (Math.random() * 100).toFixed(0);",
											"    const numberResult = parseFloat(number);",
											"    numberResult <= 25 ? letter.push(ALPHABET[numberResult]) : i--;",
											"  }",
											"  let number = [];",
											"  for (let i = 0; i < 3; i++) {",
											"    number.push(Math.floor(Math.random() * 9));",
											"  }",
											"  return `${letter[0]}${letter[1]}${letter[2]}${number[0]}${letter[3]}${number[1]}${number[2]}`;",
											"}",
											"",
											"const randomVehicleId = generateVehicleIdentification();",
											"pm.environment.set(\"RANDOM_VEHICLEID\", randomVehicleId);",
											"",
											"const postVehicle = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/veiculos',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'nome': 'Nome do Veiculo ' + pm.environment.get('RANDOM_NAME'),",
											"    'modelo': 'Modelo do Veículo' + pm.environment.get('RANDOM_NAME'),",
											"    'placa': pm.environment.get('RANDOM_VEHICLEID')",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postVehicle, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('VEICULO_ID', ID);",
											"});",
											"",
											"// ----",
											"",
											"const postCarrier = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/transportadoras',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'nome': 'Nome da Transportadora ' + pm.environment.get('RANDOM_NAME'),",
											"    'contato': pm.environment.get('RANDOM_NAME') + '@' + pm.environment.get('RANDOM_NAME') + '.com'",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postCarrier, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('TRANSPORTADORA_ID', ID);",
											"});",
											"",
											"// ----",
											"",
											"const postProduct = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/produtos',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'nome': 'Produto ' + pm.environment.get('RANDOM_NAME'),",
											"    'descricao': 'Descrição do Produto ' + pm.environment.get('RANDOM_NAME')",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postProduct, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('PRODUCT_ID', ID);",
											"});",
											"",
											"// ----",
											"",
											"const postLocalityDestination = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/localidades',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'nome': 'Nome da Localidade ' + pm.environment.get('RANDOM_NAME'),",
											"    'tipo': 'destino'",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postLocalityDestination, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('LOCALIDADEDESTINO_ID', ID);",
											"});",
											"",
											"// ----",
											"",
											"const postLocalityOrigin = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/localidades',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'nome': 'Nome da Localidade ' + pm.environment.get('RANDOM_NAME'),",
											"    'tipo': 'origem'",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postLocalityOrigin, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('LOCALIDADEORIGEM_ID', ID);",
											"});",
											"",
											"const postTrip = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/viagens',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'origem_id': pm.environment.get('LOCALIDADEORIGEM_ID'),",
											"    'destino_id': pm.environment.get('LOCALIDADEDESTINO_ID'),",
											"    'produto_id': pm.environment.get('PRODUCT_ID'),",
											"    'transportadora_id': pm.environment.get('TRANSPORTADORA_ID'),",
											"    'veiculo_id': pm.environment.get('VEICULO_ID'),",
											"    'data_partida': \"2024-08-20 08:00:00.000\",",
											"    'data_chegada': \"2024-08-25 08:00:00.000\"",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postTrip, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('VIAGEM_ID', ID);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Mensagem abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.message).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar message não nulo\", function () {",
											"    pm.expect(responseJson.message).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Mensagem de transportadora excluída\", function() {",
											"    pm.expect(responseJson.message).to.eql(\"Viagem excluída com sucesso.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/viagens/{{VIAGEM_ID}}",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"viagens",
										"{{VIAGEM_ID}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Failure",
			"item": [
				{
					"name": "Localidades",
					"item": []
				},
				{
					"name": "Produtos",
					"item": [
						{
							"name": "Consulta de Produto por id inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 404\", function() {",
											"    pm.expect(pm.response.code).to.equal(404);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a Not Found\", function() {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.notFound;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Descrição abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.error).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.not.eql(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo\", function () {",
											"    pm.expect(responseJson.nome).to.be.not.eql(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo descricao não nulo\", function () {",
											"    pm.expect(responseJson.descricao).to.be.not.eql(null);",
											"});",
											"",
											"pm.test(\"Teste: Descrição de mensagem de produto não encontrado\", function() {",
											"    pm.expect(responseJson.error).to.eql(\"Produto não encontrado.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/produtos/0",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"produtos",
										"0"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Transportadoras",
					"item": []
				},
				{
					"name": "Veiculos",
					"item": []
				},
				{
					"name": "Viagens",
					"item": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"function generateANameGenerator() {",
					"  const num = 10;",
					"  const randomNameGenerator = (num) => {",
					"    let res = '';",
					"    for (let i = 0; i < num; i++) {",
					"      const random = Math.floor(Math.random() * 27);",
					"      res += String.fromCharCode(97 + random);",
					"    }",
					"    return res;",
					"  };",
					"  return randomNameGenerator(num);",
					"}",
					"",
					"const randomName = generateANameGenerator();",
					"pm.environment.set(\"RANDOM_NAME\", randomName);",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "APP_DOMAIN_AND_PORT",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}